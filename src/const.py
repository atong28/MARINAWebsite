from typing import Literal, Dict, List
import re
from rdkit import Chem
from rdkit.Chem.rdchem import BondType as BT
from pathlib import Path

INPUT_TYPES = Literal['hsqc', 'h_nmr', 'c_nmr', 'mass_spec', 'mw', 'formula']
INPUTS_CANONICAL_ORDER: List[INPUT_TYPES] = ['hsqc', 'c_nmr', 'h_nmr', 'mass_spec', 'mw', 'formula']

DEBUG_LEN: int = 3000

DROP_PERCENTAGE: Dict[INPUT_TYPES, float] = {
    'hsqc': 0.20990,
    'h_nmr': 0.1604,
    'c_nmr': 0.1604,
    'mass_spec': 0.5,
    'mw': 0.5,
    'formula': 0.5
}

FP_RADIUS = 6

CODE_ROOT = Path(__file__).resolve().parent.parent
DATASET_ROOT = Path(__file__).resolve().parent.parent / 'data'

_pt = Chem.GetPeriodicTable()

ELEMENT_VOCAB = [_pt.GetElementSymbol(Z) for Z in range(1, 119)]
# reserve 0 for PAD, and optionally len+1 for UNK
ELEM2IDX = {sym: i+1 for i, sym in enumerate(ELEMENT_VOCAB)}
UNK_IDX = len(ELEMENT_VOCAB) + 1

# regex to split element symbols (1 or 2 letters) and optional count
FORMULA_RE = re.compile(r'([A-Z][a-z]?)(\d*)')

DO_NOT_OVERRIDE = [
    'train', 'test', 'visualize', 'load_from_checkpoint', 'input_types', 'requires', 'train_lora',
    'lora_rank_qkv', 'lora_rank_out', 'lora_rank_fc', 'lora_scale_qkv', 'lora_scale_out',
    'lora_scale_fc', 'lora_enable_attn', 'lora_enable_fc', 'adapter_dir', 'train_adapter_for_combo',
    'lora_only', 'lora_lr', 'lora_weight_decay', 'full_mix_ratio', 'distill_full_alpha',
    'distill_target'
]

ATOM_DECODER = ['C', 'N', 'O', 'S', 'P', 'F', 'Cl', 'Br', 'I', 'H']
FILTER_ATOMS = set(ATOM_DECODER)
BONDS = {BT.SINGLE: 0, BT.DOUBLE: 1, BT.TRIPLE: 2, BT.AROMATIC: 3}
ATOM_TYPES = {atom: i for i, atom in enumerate(ATOM_DECODER)}

ATOM_TO_VALENCY = {
    'H': 1,
    'He': 0,
    'Li': 1,
    'Be': 2,
    'B': 3,
    'C': 4,
    'N': 3,
    'O': 2,
    'F': 1,
    'Ne': 0,
    'Na': 1,
    'Mg': 2,
    'Al': 3,
    'Si': 4,
    'P': 3,
    'S': 2,
    'Cl': 1,
    'Ar': 0,
    'K': 1,
    'Ca': 2,
    'Sc': 3,
    'Ti': 4,
    'V': 5,
    'Cr': 2,
    'Mn': 7,
    'Fe': 2,
    'Co': 3,
    'Ni': 2,
    'Cu': 2,
    'Zn': 2,
    'Ga': 3,
    'Ge': 4,
    'As': 3,
    'Se': 2,
    'Br': 1,
    'Kr': 0,
    'Rb': 1,
    'Sr': 2,
    'Y': 3,
    'Zr': 2,
    'Nb': 2,
    'Mo': 2,
    'Tc': 6,
    'Ru': 2,
    'Rh': 3,
    'Pd': 2,
    'Ag': 1,
    'Cd': 1,
    'In': 1,
    'Sn': 2,
    'Sb': 3,
    'Te': 2,
    'I': 1,
    'Xe': 0,
    'Cs': 1,
    'Ba': 2,
    'La': 3,
    'Ce': 3,
    'Pr': 3,
    'Nd': 3,
    'Pm': 3,
    'Sm': 2,
    'Eu': 2,
    'Gd': 3,
    'Tb': 3,
    'Dy': 3,
    'Ho': 3,
    'Er': 3,
    'Tm': 2,
    'Yb': 2,
    'Lu': 3,
    'Hf': 4,
    'Ta': 3,
    'W': 2,
    'Re': 1,
    'Os': 2,
    'Ir': 1,
    'Pt': 1,
    'Au': 1,
    'Hg': 1,
    'Tl': 1,
    'Pb': 2,
    'Bi': 3,
    'Po': 2,
    'At': 1,
    'Rn': 0,
    'Fr': 1,
    'Ra': 2,
    'Ac': 3,
    'Th': 4,
    'Pa': 5,
    'U': 2,
}

ATOM_TO_WEIGHT = {
    'H': 1,
    'He': 4,
    'Li': 7,
    'Be': 9,
    'B': 11,
    'C': 12,
    'N': 14,
    'O': 16,
    'F': 19,
    'Ne': 20,
    'Na': 23,
    'Mg': 24,
    'Al': 27,
    'Si': 28,
    'P': 31,
    'S': 32,
    'Cl': 35,
    'Ar': 40,
    'K': 39,
    'Ca': 40,
    'Sc': 45,
    'Ti': 48,
    'V': 51,
    'Cr': 52,
    'Mn': 55,
    'Fe': 56,
    'Co': 59,
    'Ni': 59,
    'Cu': 64,
    'Zn': 65,
    'Ga': 70,
    'Ge': 73,
    'As': 75,
    'Se': 79,
    'Br': 80,
    'Kr': 84,
    'Rb': 85,
    'Sr': 88,
    'Y': 89,
    'Zr': 91,
    'Nb': 93,
    'Mo': 96,
    'Tc': 98,
    'Ru': 101,
    'Rh': 103,
    'Pd': 106,
    'Ag': 108,
    'Cd': 112,
    'In': 115,
    'Sn': 119,
    'Sb': 122,
    'Te': 128,
    'I': 127,
    'Xe': 131,
    'Cs': 133,
    'Ba': 137,
    'La': 139,
    'Ce': 140,
    'Pr': 141,
    'Nd': 144,
    'Pm': 145,
    'Sm': 150,
    'Eu': 152,
    'Gd': 157,
    'Tb': 159,
    'Dy': 163,
    'Ho': 165,
    'Er': 167,
    'Tm': 169,
    'Yb': 173,
    'Lu': 175,
    'Hf': 178,
    'Ta': 181,
    'W': 184,
    'Re': 186,
    'Os': 190,
    'Ir': 192,
    'Pt': 195,
    'Au': 197,
    'Hg': 201,
    'Tl': 204,
    'Pb': 207,
    'Bi': 209,
    'Po': 209,
    'At': 210,
    'Rn': 222,
    'Fr': 223,
    'Ra': 226,
    'Ac': 227,
    'Th': 232,
    'Pa': 231,
    'U': 238,
    'Np': 237,
    'Pu': 244,
    'Am': 243,
    'Cm': 247,
    'Bk': 247,
    'Cf': 251,
    'Es': 252,
    'Fm': 257,
    'Md': 258,
    'No': 259,
    'Lr': 262,
    'Rf': 267,
    'Db': 270,
    'Sg': 269,
    'Bh': 264,
    'Hs': 269,
    'Mt': 278,
    'Ds': 281,
    'Rg': 282,
    'Cn': 285,
    'Nh': 286,
    'Fl': 289,
    'Mc': 290,
    'Lv': 293,
    'Ts': 294,
    'Og': 294,
}

VALENCY = [ATOM_TO_VALENCY.get(atom, 0) for atom in ATOM_DECODER]